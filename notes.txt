Name
Experience
Primary Skillset
Experience in Golang (if any)

Timings
Commence : 9:30
Tea break : 11:00 (20 mins)
Lunch break : 13:00 (60 mins)
Tea break : 15:30 (20 mins)
Wind up : 17:30

Why Golang?
    Simplicity
        25 keywords
        NO classes & Inheritance
            Only Structs (state) & functions (behavior)
            Composition over Inheritance
        Abstractions using Interfaces
            Implicity implementation of interfaces
        NO access control modifiers
        Support of Higher Order Functions
            functions can be assigned to variables
            functions can be passed as arguments to other functions
            functions can be retured as a return value from other function

    Faster execution
    Faster build creation
    No support for dynamic libraries
    Built for concurrency  
        Language Feature
            go, chan, select, range
        Scheduler is built in the runtime
        1000s of goroutines can be executed using 1 thread


go version
visual studio code (http://code.visualstudio.com) OR goland 

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias as int32) (represents 1 character)

    No implicit type conversion

Verbs for formating strings (to use with the "fmt" package)
    https://golang.org/pkg/fmt/

Go Env variables

GOROOT
    path to the go binaries

GOPATH (path where the application source code resides) (before 1.13)
    bin
    pkg
    src
        /github.com
            /tkmagesh77
                /my-app
                    

To create a module file
    go mod init <module_name>

create a 'math' package with a function IsPrime


Create a program when executed will display the following menu
    1. Add
    2. Subtract
    3. Multiply
    4. Divide
    5. Exit


Collections
    Array
        list of values of the same type
        fixed size
        apis
            len()

    Slice (Wrapper for the array)
        list of values of the same type
        can be of varying size (immutable)
        Uses an array internally
        apis
            append()
            len()
    
    Map
        collection of key value pairs (dictionary, hashtable)
        api
            delete()


Methods Assignment
Create a type for a collection of products (Products)
Implement the following Methods
    -AddProduct(....)

    -Index() //return the index of the given product

    -Includes() //return true/false depending on the presence of the given product in the Products collection

    -Any() //return true/false depending on any product in the collection matching the given criteria

    -All() //return true/false depending on all the products in the collection matching the given criteria
    
    -Filter() // return new Products collection will all the products matching the given criteria


IO packages
    os
    io
    io/ioutils

io stream processing - assignment
    find the sum of even numbers from both the file
    find the sum of odd numbers from both the file
    create a result file (result.txt)
        even = 878
        odd = 979

    Source - read the file contents, parse it and write them to a channel
    Splitter - read the data from the 'Source' and write them into one of the two channels based on even/odd condition
    Sum - read the data from 'Splitter' and aggregate them and write the write the result to another channel
    Merger - read the data from 'Sum' and write the result into a 'result.txt' file
    
Homework
    1. Merge the files in the 00-assignment folder
    2. Break the io-stream-processing into two applications
        1. reads the files, parse them and send the numbers over tcp to the second application
        2. will listen for tcp connections and read the data from connections and process them

CORBA
Web
    TCP/IP
    HTTP
        XML
    JSON

    REST (Respresentational State Transfer)
        Data is treated as a web resource
            Address any data using the URL
                
                http://myServices.com/Products
                http://myServices.com/Products/P101
                http://myServices.com/Products
                
                http://myServices.com/Cagtegories
                http://myServices.com/Cagtegories/Stationary/Products
            
            HTTP Verbs as operations
                GET
                POST (Insert)
                PUT (Update)
                DELETE (Remove)
                HEAD (exists)

            XML/JSON

Drawbacks of HTTP
    data in text format
    Stateless
    request/response model

SPDY (HTTP2)
    data in binary format
    tunnel
        batch of requests are possible using the same connection
    sticky connections
        server push is possible

protobuf


Application = collection of microservices

gRPC
    HTTP2
        data in binary format
        tunnel
        sticky connections
            server push is possible
        encryption is by default
    protobuf
        efficient way of serializing the data
    

Schema
    Request Format
    Response Format
    Service Description

tools for generating proxy and stub (in different languages)

Tools 
    go get -u google.golang.org/grpc
    go get -u github.com/golang/protobuf/protoc-gen-go

To generate proxy and stub
    protoc <proto file> --go_out=plugins=grpc:.
    ex:
    protoc proto/calculator.proto --go_out=plugins=grpc:.  


Troubleshoot generating proto proxy
    export GOROOT=/usr/local/go
    export GOPATH=$HOME/go
    export GOBIN=$GOPATH/bin
    export PATH=$PATH:$GOROOT:$GOPATH:$GOBIN

To create an image for the grpc-chat app
    Run the following command in the grpc-chat folder
        docker build -t grpc-chat-image-name .
    
        To create a container instance run the following command
            docker run -p 8080:8080 grpc-chat-image-name
